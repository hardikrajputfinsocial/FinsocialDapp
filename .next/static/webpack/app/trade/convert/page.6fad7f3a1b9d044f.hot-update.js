"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/trade/convert/page",{

/***/ "(app-pages-browser)/./hooks/useWalletBalance.ts":
/*!***********************************!*\
  !*** ./hooks/useWalletBalance.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWalletBalance: () => (/* binding */ useWalletBalance)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* __next_internal_client_entry_do_not_use__ useWalletBalance auto */ \n\n\n// Token contract addresses on Ethereum mainnet\nconst TOKEN_ADDRESSES = {\n    eth: 'native',\n    usdt: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n    usdc: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n    bnb: '0xB8c77482e45F1F44dE1745F52C74426C631bDD52',\n    sol: '0xD31a59c85aE9D8edEFeC411D448f90841571b89c',\n    btc: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599' // Wrapped BTC\n};\n// Hardcoded token decimals to avoid contract calls\nconst TOKEN_DECIMALS = {\n    eth: 18,\n    usdt: 6,\n    usdc: 6,\n    bnb: 18,\n    sol: 9,\n    btc: 8\n};\n// ABI for ERC20 token balanceOf function\nconst ERC20_ABI = [\n    'function balanceOf(address owner) view returns (uint256)',\n    'function decimals() view returns (uint8)'\n];\n// Exchange rates for demo purposes\nconst EXCHANGE_RATES = {\n    btc: {\n        eth: 15.23,\n        usdt: 43250.78,\n        usdc: 43245.65,\n        bnb: 112.45,\n        sol: 276.89\n    },\n    eth: {\n        btc: 0.0656,\n        usdt: 2845.32,\n        usdc: 2843.21,\n        bnb: 7.38,\n        sol: 18.21\n    },\n    usdt: {\n        btc: 0.000023,\n        eth: 0.00035,\n        usdc: 0.9998,\n        bnb: 0.0026,\n        sol: 0.0064\n    },\n    usdc: {\n        btc: 0.000023,\n        eth: 0.00035,\n        usdt: 1.0002,\n        bnb: 0.0026,\n        sol: 0.0064\n    },\n    bnb: {\n        btc: 0.0089,\n        eth: 0.1355,\n        usdt: 385.45,\n        usdc: 385.12,\n        sol: 2.47\n    },\n    sol: {\n        btc: 0.0036,\n        eth: 0.0549,\n        usdt: 156.23,\n        usdc: 156.08,\n        bnb: 0.405\n    }\n};\nfunction useWalletBalance() {\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [walletAddress, setWalletAddress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [balances, setBalances] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        btc: '0',\n        eth: '0',\n        usdt: '0',\n        usdc: '0',\n        bnb: '0',\n        sol: '0'\n    });\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Check if wallet is connected on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useWalletBalance.useEffect\": ()=>{\n            const checkWalletConnection = {\n                \"useWalletBalance.useEffect.checkWalletConnection\": ()=>{\n                    const savedAddress = localStorage.getItem('walletAddress');\n                    if (savedAddress) {\n                        setWalletAddress(savedAddress);\n                        setIsConnected(true);\n                        fetchBalances(savedAddress);\n                    }\n                }\n            }[\"useWalletBalance.useEffect.checkWalletConnection\"];\n            checkWalletConnection();\n        }\n    }[\"useWalletBalance.useEffect\"], []);\n    // Function to get a provider\n    const getProvider = ()=>{\n        // Check if MetaMask is available\n        if ( true && window.ethereum) {\n            return new ethers__WEBPACK_IMPORTED_MODULE_2__.Web3Provider(window.ethereum);\n        }\n        // Fallback to Infura or other public provider\n        return new ethers__WEBPACK_IMPORTED_MODULE_3__.JsonRpcProvider('https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161');\n    };\n    // Format balance with proper decimals\n    const formatBalance = (balance, decimals)=>{\n        return ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(balance, decimals);\n    };\n    // Generate consistent mock balances based on wallet address\n    const generateMockBalances = (address)=>{\n        // Use the wallet address to generate deterministic balances\n        // This ensures the same address always shows the same balances\n        const addressSum = address.toLowerCase().split('').reduce((sum, char)=>sum + char.charCodeAt(0), 0);\n        const seed = addressSum / 1000;\n        return {\n            btc: (0.001 + seed * 0.025 % 0.1).toFixed(4),\n            eth: (0.1 + seed * 0.5 % 2).toFixed(4),\n            usdt: (100 + seed * 50 % 500).toFixed(2),\n            usdc: (100 + seed * 45 % 500).toFixed(2),\n            bnb: (0.5 + seed * 0.75 % 5).toFixed(3),\n            sol: (2 + seed * 1.5 % 10).toFixed(2)\n        };\n    };\n    // Fetch wallet balances - only fetch real ETH balance and use mock data for other tokens\n    const fetchBalances = async (address)=>{\n        if (!address) return;\n        setIsLoading(true);\n        try {\n            // Generate mock balances first as a base\n            const mockBalances = generateMockBalances(address);\n            let newBalances = {\n                ...mockBalances\n            };\n            // Only try to get real ETH balance from the blockchain\n            try {\n                const provider = getProvider();\n                const ethBalance = await provider.getBalance(address);\n                newBalances.eth = formatBalance(ethBalance, TOKEN_DECIMALS.eth);\n                console.log('Successfully fetched real ETH balance:', newBalances.eth);\n            } catch (err) {\n                console.error('Error fetching ETH balance:', err);\n            // Keep the mock ETH balance if there's an error\n            }\n            setBalances(newBalances);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success('Wallet balances updated');\n        } catch (error) {\n            console.error('Error in fetchBalances:', error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error('Failed to fetch wallet balances');\n            // Fall back to mock data if there's a critical error\n            const mockBalances = generateMockBalances(address);\n            setBalances(mockBalances);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Get exchange rate between two coins\n    const getExchangeRate = (fromCoin, toCoin)=>{\n        var _EXCHANGE_RATES_fromCoin;\n        if (fromCoin === toCoin) return 1;\n        return ((_EXCHANGE_RATES_fromCoin = EXCHANGE_RATES[fromCoin]) === null || _EXCHANGE_RATES_fromCoin === void 0 ? void 0 : _EXCHANGE_RATES_fromCoin[toCoin]) || 0;\n    };\n    // Calculate conversion amount\n    const calculateConversion = (fromCoin, toCoin, amount)=>{\n        const rate = getExchangeRate(fromCoin, toCoin);\n        return amount * rate;\n    };\n    return {\n        isConnected,\n        walletAddress,\n        balances,\n        isLoading,\n        fetchBalances,\n        getExchangeRate,\n        calculateConversion\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useWalletBalance.ts\n"));

/***/ })

});